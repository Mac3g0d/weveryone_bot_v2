package bot

import (
	"fmt"
	"strconv"
	"strings"
	"weveryone_bot_v2/interfaces"
	"weveryone_bot_v2/models"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const (
	itemsPerPage = 15
)

type TelegramBot struct {
	bot     *tgbotapi.BotAPI
	db      interfaces.Database
	adminID int64
}

func NewTelegramBot(token string, adminID int64, db interfaces.Database) (*TelegramBot, error) {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: %v", err)
	}

	return &TelegramBot{
		bot:     bot,
		db:      db,
		adminID: adminID,
	}, nil
}

// GetUpdatesChan –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
func (b *TelegramBot) GetUpdatesChan(config tgbotapi.UpdateConfig) tgbotapi.UpdatesChannel {
	return b.bot.GetUpdatesChan(config)
}

func (b *TelegramBot) IsAdmin(userID int64) bool {
	return userID == b.adminID
}

func (b *TelegramBot) ShowAdminPanel(chatID int64) {
	helpText := `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/all –∏–ª–∏ /everyone - —É–ø–æ–º—è–Ω—É—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ
/group <–Ω–∞–∑–≤–∞–Ω–∏–µ> - —É–ø–æ–º—è–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/start - –ø–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)

–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
/admin - –ø–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
/add_user <user_id> <username> - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/del_user <user_id> - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/list_users - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/add_chat <chat_id> <title> - –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç
/del_chat <chat_id> - —É–¥–∞–ª–∏—Ç—å —á–∞—Ç
/list_chats - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
/add_group <name> - —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É
/del_group <name> - —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É
/list_groups - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
/add_to_chat <user_id> <chat_id> - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
/add_to_group <user_id> <group_name> - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É
/link_group_chat <group_name> <chat_id> - —Å–≤—è–∑–∞—Ç—å –≥—Ä—É–ø–ø—É —Å —á–∞—Ç–æ–º
/add_users_to_chat <chat_id> <user_id1> [user_id2 ...] - –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç`

	msg := tgbotapi.NewMessage(chatID, helpText)
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "admin_users"),
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "create_user"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí¨ –ß–∞—Ç—ã", "admin_chats"),
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –°–æ–∑–¥–∞—Ç—å —á–∞—Ç", "create_chat"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë• –ì—Ä—É–ø–ø—ã", "admin_groups"),
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É", "create_group"),
		),
	)
	b.bot.Send(msg)
}

func (b *TelegramBot) ShowHelp(chatID int64) {
	helpText := `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/all –∏–ª–∏ /everyone - —É–ø–æ–º—è–Ω—É—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ
/group <–Ω–∞–∑–≤–∞–Ω–∏–µ> - —É–ø–æ–º—è–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/start - –ø–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)

–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
/admin - –ø–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
/add_user <user_id> <username> - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/del_user <user_id> - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/list_users - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/add_chat <chat_id> <title> - –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç
/del_chat <chat_id> - —É–¥–∞–ª–∏—Ç—å —á–∞—Ç
/list_chats - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
/add_group <name> - —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É
/del_group <name> - —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É
/list_groups - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
/add_to_chat <user_id> <chat_id> - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
/add_to_group <user_id> <group_name> - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É
/link_group_chat <group_name> <chat_id> - —Å–≤—è–∑–∞—Ç—å –≥—Ä—É–ø–ø—É —Å —á–∞—Ç–æ–º`

	msg := tgbotapi.NewMessage(chatID, helpText)
	b.bot.Send(msg)
}

func (b *TelegramBot) ShowViewMenu(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å:")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "view_users"),
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ—Å–º–æ—Ç—Ä —á–∞—Ç–æ–≤", "view_chats"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä—É–ø–ø", "view_groups"),
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤—è–∑–µ–π", "view_relations"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "admin_back"),
		),
	)
	b.bot.Send(msg)
}

// deleteMessage —É–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (b *TelegramBot) deleteMessage(chatID int64, messageID int) {
	deleteMsg := tgbotapi.NewDeleteMessage(chatID, messageID)
	b.bot.Send(deleteMsg)
}

func (b *TelegramBot) ShowUsersList(chatID int64, page int, update *tgbotapi.Update) {
	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if update != nil && update.CallbackQuery != nil {
		b.deleteMessage(chatID, update.CallbackQuery.Message.MessageID)
	}

	users := b.db.ListUsers()
	totalPages := (len(users) + itemsPerPage - 1) / itemsPerPage
	if page < 1 {
		page = 1
	}
	if page > totalPages {
		page = totalPages
	}

	start := (page - 1) * itemsPerPage
	end := start + itemsPerPage
	if end > len(users) {
		end = len(users)
	}

	var msgText strings.Builder
	msgText.WriteString(fmt.Sprintf("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ %d –∏–∑ %d):\n\n", page, totalPages))
	for _, user := range users[start:end] {
		msgText.WriteString(fmt.Sprintf("ID: %d\nUsername: %s\n\n", user.UserID, user.Username))
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	row := make([]tgbotapi.InlineKeyboardButton, 0)

	if page > 1 {
		row = append(row, tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è", fmt.Sprintf("users_page_%d", page-1)))
	}
	if page < totalPages {
		row = append(row, tgbotapi.NewInlineKeyboardButtonData("‚ñ∂Ô∏è", fmt.Sprintf("users_page_%d", page+1)))
	}
	if len(row) > 0 {
		rows = append(rows, row)
	}

	for _, user := range users[start:end] {
		rows = append(rows, []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData(
				fmt.Sprintf("üë§ %s", user.Username),
				fmt.Sprintf("user_info_%d", user.UserID),
			),
		})
	}

	rows = append(rows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "create_user"),
		tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "admin_back"),
	})

	msg := tgbotapi.NewMessage(chatID, msgText.String())
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	b.bot.Send(msg)
}

func (b *TelegramBot) ShowChatsList(chatID int64, page int, update *tgbotapi.Update) {
	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if update != nil && update.CallbackQuery != nil {
		b.deleteMessage(chatID, update.CallbackQuery.Message.MessageID)
	}

	chats := b.db.ListChats()
	totalPages := (len(chats) + itemsPerPage - 1) / itemsPerPage
	if page < 1 {
		page = 1
	}
	if page > totalPages {
		page = totalPages
	}

	start := (page - 1) * itemsPerPage
	end := start + itemsPerPage
	if end > len(chats) {
		end = len(chats)
	}

	var msgText strings.Builder
	msgText.WriteString(fmt.Sprintf("–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ %d –∏–∑ %d):\n\n", page, totalPages))
	for _, chat := range chats[start:end] {
		msgText.WriteString(fmt.Sprintf("ID: %d\nTitle: %s\n\n", chat.ChatID, chat.Title))
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	row := make([]tgbotapi.InlineKeyboardButton, 0)

	if page > 1 {
		row = append(row, tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è", fmt.Sprintf("chats_page_%d", page-1)))
	}
	if page < totalPages {
		row = append(row, tgbotapi.NewInlineKeyboardButtonData("‚ñ∂Ô∏è", fmt.Sprintf("chats_page_%d", page+1)))
	}
	if len(row) > 0 {
		rows = append(rows, row)
	}

	for _, chat := range chats[start:end] {
		rows = append(rows, []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData(
				fmt.Sprintf("üí¨ %s", chat.Title),
				fmt.Sprintf("chat_info_%d", chat.ChatID),
			),
		})
	}

	rows = append(rows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("‚ûï –°–æ–∑–¥–∞—Ç—å —á–∞—Ç", "create_chat"),
		tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "admin_back"),
	})

	msg := tgbotapi.NewMessage(chatID, msgText.String())
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	b.bot.Send(msg)
}

func (b *TelegramBot) ShowGroupsList(chatID int64, page int, update *tgbotapi.Update) {
	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if update != nil && update.CallbackQuery != nil {
		b.deleteMessage(chatID, update.CallbackQuery.Message.MessageID)
	}

	groups := b.db.ListGroups()
	totalPages := (len(groups) + itemsPerPage - 1) / itemsPerPage
	if page < 1 {
		page = 1
	}
	if page > totalPages {
		page = totalPages
	}

	start := (page - 1) * itemsPerPage
	end := start + itemsPerPage
	if end > len(groups) {
		end = len(groups)
	}

	var msgText strings.Builder
	msgText.WriteString(fmt.Sprintf("–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ %d –∏–∑ %d):\n\n", page, totalPages))
	for _, group := range groups[start:end] {
		msgText.WriteString(fmt.Sprintf("Name: %s\n\n", group.Name))
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	row := make([]tgbotapi.InlineKeyboardButton, 0)

	if page > 1 {
		row = append(row, tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è", fmt.Sprintf("groups_page_%d", page-1)))
	}
	if page < totalPages {
		row = append(row, tgbotapi.NewInlineKeyboardButtonData("‚ñ∂Ô∏è", fmt.Sprintf("groups_page_%d", page+1)))
	}
	if len(row) > 0 {
		rows = append(rows, row)
	}

	for _, group := range groups[start:end] {
		rows = append(rows, []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData(
				fmt.Sprintf("üë• %s", group.Name),
				fmt.Sprintf("group_info_%s", group.Name),
			),
		})
	}

	rows = append(rows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("‚ûï –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É", "create_group"),
		tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "admin_back"),
	})

	msg := tgbotapi.NewMessage(chatID, msgText.String())
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	b.bot.Send(msg)
}

func (b *TelegramBot) ShowUserInfo(chatID int64, userID int64) {
	user, err := b.db.GetUser(userID)
	if err != nil {
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
		b.bot.Send(msg)
		return
	}

	var msgText strings.Builder
	msgText.WriteString(fmt.Sprintf("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"))
	msgText.WriteString(fmt.Sprintf("ID: %d\n", user.UserID))
	msgText.WriteString(fmt.Sprintf("Username: %s\n", user.Username))

	// –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	chats := b.db.GetChatsForUser(userID)
	if len(chats) > 0 {
		msgText.WriteString("\n–ß–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n")
		for _, chat := range chats {
			msgText.WriteString(fmt.Sprintf("- %s\n", chat.Title))
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	groups := b.db.GetGroupsForUser(userID)
	if len(groups) > 0 {
		msgText.WriteString("\n–ì—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n")
		for _, group := range groups {
			msgText.WriteString(fmt.Sprintf("- %s\n", group.Name))
		}
	}

	rows := [][]tgbotapi.InlineKeyboardButton{
		{
			tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", fmt.Sprintf("edit_user_%d", userID)),
			tgbotapi.NewInlineKeyboardButtonData("üóë –£–¥–∞–ª–∏—Ç—å", fmt.Sprintf("delete_user_%d", userID)),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "admin_users"),
		},
	}

	msg := tgbotapi.NewMessage(chatID, msgText.String())
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	b.bot.Send(msg)
}

func (b *TelegramBot) ShowChatInfo(chatID int64, targetChatID int64) {
	chat, err := b.db.GetChat(targetChatID)
	if err != nil {
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ")
		b.bot.Send(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞
	users := b.db.GetUsersForChat(targetChatID)
	var usersList string
	if len(users) > 0 {
		usersList = "\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —á–∞—Ç–∞:\n"
		for _, user := range users {
			usersList += fmt.Sprintf("- @%s\n", user.Username)
		}
	} else {
		usersList = "\n\n–í —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
	}

	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:\nID: %d\n–ù–∞–∑–≤–∞–Ω–∏–µ: %s%s",
		chat.ChatID, chat.Title, usersList))

	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", fmt.Sprintf("add_users_to_chat_%d", targetChatID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", fmt.Sprintf("edit_chat_%d", targetChatID)),
			tgbotapi.NewInlineKeyboardButtonData("üóë –£–¥–∞–ª–∏—Ç—å", fmt.Sprintf("delete_chat_%d", targetChatID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "admin_chats"),
		),
	)
	b.bot.Send(msg)
}

func (b *TelegramBot) ShowUsersToAddToChat(chatID int64, targetChatID int64, page int, update *tgbotapi.Update) {
	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if update != nil && update.CallbackQuery != nil {
		b.deleteMessage(chatID, update.CallbackQuery.Message.MessageID)
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	allUsers := b.db.ListUsers()

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤ —á–∞—Ç–µ
	chatUsers := b.db.GetUsersForChat(targetChatID)
	chatUserMap := make(map[int64]bool)
	for _, user := range chatUsers {
		chatUserMap[user.UserID] = true
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç –≤ —á–∞—Ç–µ
	var availableUsers []models.User
	for _, user := range allUsers {
		if !chatUserMap[user.UserID] {
			availableUsers = append(availableUsers, user)
		}
	}

	// –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è
	if len(availableUsers) == 0 {
		msg := tgbotapi.NewMessage(chatID, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–∞—Ç")
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", fmt.Sprintf("chat_info_%d", targetChatID)),
			),
		)
		b.bot.Send(msg)
		return
	}

	totalPages := (len(availableUsers) + itemsPerPage - 1) / itemsPerPage
	if page < 1 {
		page = 1
	}
	if page > totalPages {
		page = totalPages
	}

	start := (page - 1) * itemsPerPage
	end := start + itemsPerPage
	if end > len(availableUsers) {
		end = len(availableUsers)
	}

	var msgText strings.Builder
	msgText.WriteString(fmt.Sprintf("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–∞—Ç (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ %d –∏–∑ %d):\n\n", page, totalPages))
	for _, user := range availableUsers[start:end] {
		msgText.WriteString(fmt.Sprintf("ID: %d\nUsername: %s\n\n", user.UserID, user.Username))
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	row := make([]tgbotapi.InlineKeyboardButton, 0)

	if page > 1 {
		row = append(row, tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è", fmt.Sprintf("add_users_to_chat_page_%d_%d", targetChatID, page-1)))
	}
	if page < totalPages {
		row = append(row, tgbotapi.NewInlineKeyboardButtonData("‚ñ∂Ô∏è", fmt.Sprintf("add_users_to_chat_page_%d_%d", targetChatID, page+1)))
	}
	if len(row) > 0 {
		rows = append(rows, row)
	}

	for _, user := range availableUsers[start:end] {
		rows = append(rows, []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData(
				fmt.Sprintf("‚ûï @%s", user.Username),
				fmt.Sprintf("add_user_to_chat_%d_%d", targetChatID, user.UserID),
			),
		})
	}

	rows = append(rows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", fmt.Sprintf("chat_info_%d", targetChatID)),
	})

	msg := tgbotapi.NewMessage(chatID, msgText.String())
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	b.bot.Send(msg)
}

func (b *TelegramBot) ShowGroupInfo(chatID int64, groupName string) {
	group, err := b.db.GetGroup(groupName)
	if err != nil {
		msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ: %v", err))
		b.bot.Send(msg)
		return
	}

	users := b.db.GetUsersForGroup(groupName)
	var msgText strings.Builder
	msgText.WriteString(fmt.Sprintf("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ: %s\n\n", group.Name))
	msgText.WriteString("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –≥—Ä—É–ø–ø–µ:\n")
	for _, user := range users {
		msgText.WriteString(fmt.Sprintf("- @%s\n", user.Username))
	}

	msg := tgbotapi.NewMessage(chatID, msgText.String())
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", fmt.Sprintf("add_users_to_group_%s", groupName)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", fmt.Sprintf("edit_group_%s", groupName)),
			tgbotapi.NewInlineKeyboardButtonData("üóë –£–¥–∞–ª–∏—Ç—å", fmt.Sprintf("delete_group_%s", groupName)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "admin_groups"),
		),
	)
	b.bot.Send(msg)
}

func (b *TelegramBot) ShowUsersToAddToGroup(chatID int64, groupName string, page int, update *tgbotapi.Update) {
	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if update != nil && update.CallbackQuery != nil {
		b.deleteMessage(chatID, update.CallbackQuery.Message.MessageID)
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	allUsers := b.db.ListUsers()

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ
	groupUsers := b.db.GetUsersForGroup(groupName)
	groupUserMap := make(map[int64]bool)
	for _, user := range groupUsers {
		groupUserMap[user.UserID] = true
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç –≤ –≥—Ä—É–ø–ø–µ
	var availableUsers []models.User
	for _, user := range allUsers {
		if !groupUserMap[user.UserID] {
			availableUsers = append(availableUsers, user)
		}
	}

	// –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è
	if len(availableUsers) == 0 {
		msg := tgbotapi.NewMessage(chatID, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É")
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", fmt.Sprintf("group_info_%s", groupName)),
			),
		)
		b.bot.Send(msg)
		return
	}

	totalPages := (len(availableUsers) + itemsPerPage - 1) / itemsPerPage
	if page < 1 {
		page = 1
	}
	if page > totalPages {
		page = totalPages
	}

	start := (page - 1) * itemsPerPage
	end := start + itemsPerPage
	if end > len(availableUsers) {
		end = len(availableUsers)
	}

	var msgText strings.Builder
	msgText.WriteString(fmt.Sprintf("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É %s (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ %d –∏–∑ %d):\n\n", groupName, page, totalPages))
	for _, user := range availableUsers[start:end] {
		msgText.WriteString(fmt.Sprintf("ID: %d\nUsername: %s\n\n", user.UserID, user.Username))
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	row := make([]tgbotapi.InlineKeyboardButton, 0)

	if page > 1 {
		row = append(row, tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è", fmt.Sprintf("add_users_to_group_page_%s_%d", groupName, page-1)))
	}
	if page < totalPages {
		row = append(row, tgbotapi.NewInlineKeyboardButtonData("‚ñ∂Ô∏è", fmt.Sprintf("add_users_to_group_page_%s_%d", groupName, page+1)))
	}
	if len(row) > 0 {
		rows = append(rows, row)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	for _, user := range availableUsers[start:end] {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("‚ûï –î–æ–±–∞–≤–∏—Ç—å @%s", user.Username),
				fmt.Sprintf("add_user_to_group_%s_%d", groupName, user.UserID)),
		))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", fmt.Sprintf("group_info_%s", groupName)),
	))

	msg := tgbotapi.NewMessage(chatID, msgText.String())
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	b.bot.Send(msg)
}

func (b *TelegramBot) ShowRelations(chatID int64) {
	chats := b.db.ListChats()
	groups := b.db.ListGroups()

	var msgText strings.Builder
	msgText.WriteString("–°–≤—è–∑–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:\n\n")

	msgText.WriteString("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —á–∞—Ç–∞—Ö:\n")
	for _, chat := range chats {
		users := b.db.GetUsersForMention(chat.ChatID, "")
		if len(users) > 0 {
			msgText.WriteString(fmt.Sprintf("–ß–∞—Ç %s (%d): %s\n", chat.Title, chat.ChatID, strings.Join(users, ", ")))
		}
	}
	msgText.WriteString("\n")

	msgText.WriteString("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö:\n")
	for _, group := range groups {
		users := b.db.GetUsersForMention(0, group.Name)
		if len(users) > 0 {
			msgText.WriteString(fmt.Sprintf("–ì—Ä—É–ø–ø–∞ %s: %s\n", group.Name, strings.Join(users, ", ")))
		}
	}

	msg := tgbotapi.NewMessage(chatID, msgText.String())
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "admin_view"),
		),
	)
	b.bot.Send(msg)
}

func (b *TelegramBot) HandleCommand(update tgbotapi.Update) {
	msg := update.Message
	chatID := msg.Chat.ID
	userID := msg.From.ID
	command := msg.Command()

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥
	if command == "" {
		text := msg.Text
		if strings.HasPrefix(text, "/") {
			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥
			commands := []string{
				"/all - —É–ø–æ–º—è–Ω—É—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ",
				"/everyone - —É–ø–æ–º—è–Ω—É—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ",
				"/group - —É–ø–æ–º—è–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã",
				"/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É",
				"/start - –ø–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
				"/admin - –ø–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
				"/add_user - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
				"/del_user - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
				"/list_users - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
				"/add_chat - –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç",
				"/del_chat - —É–¥–∞–ª–∏—Ç—å —á–∞—Ç",
				"/list_chats - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤",
				"/add_group - —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É",
				"/del_group - —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É",
				"/list_groups - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø",
				"/add_to_chat - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç",
				"/add_to_group - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É",
				"/link_group_chat - —Å–≤—è–∑–∞—Ç—å –≥—Ä—É–ø–ø—É —Å —á–∞—Ç–æ–º",
				"/add_users_to_chat - –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç",
			}

			var suggestions []string
			partial := strings.ToLower(text[1:]) // –£–±–∏—Ä–∞–µ–º "/" –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
			switch {
			case strings.HasPrefix(partial, "add_to_chat"):
				chats := b.db.ListChats()
				for _, chat := range chats {
					suggestions = append(suggestions, fmt.Sprintf("/add_to_chat %d", chat.ChatID))
				}
			case strings.HasPrefix(partial, "add_to_group"):
				groups := b.db.ListGroups()
				for _, group := range groups {
					suggestions = append(suggestions, fmt.Sprintf("/add_to_group %s", group.Name))
				}
			case strings.HasPrefix(partial, "del_user"):
				users := b.db.ListUsers()
				for _, user := range users {
					suggestions = append(suggestions, fmt.Sprintf("/del_user %d", user.UserID))
				}
			case strings.HasPrefix(partial, "del_chat"):
				chats := b.db.ListChats()
				for _, chat := range chats {
					suggestions = append(suggestions, fmt.Sprintf("/del_chat %d", chat.ChatID))
				}
			case strings.HasPrefix(partial, "del_group"):
				groups := b.db.ListGroups()
				for _, group := range groups {
					suggestions = append(suggestions, fmt.Sprintf("/del_group %s", group.Name))
				}
			case strings.HasPrefix(partial, "link_group_chat"):
				groups := b.db.ListGroups()
				chats := b.db.ListChats()
				for _, group := range groups {
					for _, chat := range chats {
						suggestions = append(suggestions, fmt.Sprintf("/link_group_chat %s %d", group.Name, chat.ChatID))
					}
				}
			case strings.HasPrefix(partial, "add_users_to_chat"):
				chats := b.db.ListChats()
				for _, chat := range chats {
					suggestions = append(suggestions, fmt.Sprintf("/add_users_to_chat %d", chat.ChatID))
				}
			default:
				for _, cmd := range commands {
					if strings.HasPrefix(strings.ToLower(cmd), partial) {
						suggestions = append(suggestions, cmd)
					}
				}
			}

			if len(suggestions) > 0 {
				msg := tgbotapi.NewMessage(chatID, "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n\n"+strings.Join(suggestions, "\n"))
				b.bot.Send(msg)
				return
			}
		}
	}

	switch command {
	case "start":
		if b.IsAdmin(userID) {
			b.ShowAdminPanel(chatID)
		} else {
			msg := tgbotapi.NewMessage(chatID, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
			b.bot.Send(msg)
		}

	case "help":
		b.ShowHelp(chatID)

	case "all", "everyone":
		users := b.db.GetUsersForMention(chatID, "")
		if len(users) > 0 {
			msg := tgbotapi.NewMessage(chatID, strings.Join(users, " "))
			b.bot.Send(msg)
		} else {
			msg := tgbotapi.NewMessage(chatID, "–í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
			b.bot.Send(msg)
		}

	case "group":
		args := strings.Fields(msg.Text)
		if len(args) < 2 {
			msg := tgbotapi.NewMessage(chatID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /group <–Ω–∞–∑–≤–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã>")
			b.bot.Send(msg)
			return
		}
		groupName := args[1]
		users := b.db.GetUsersForMention(chatID, groupName)
		if len(users) > 0 {
			msg := tgbotapi.NewMessage(chatID, strings.Join(users, " "))
			b.bot.Send(msg)
		} else {
			msg := tgbotapi.NewMessage(chatID, "–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
			b.bot.Send(msg)
		}

	case "add_user":
		if !b.IsAdmin(userID) {
			msg := tgbotapi.NewMessage(chatID, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
			b.bot.Send(msg)
			return
		}
		args := strings.Fields(msg.Text)
		if len(args) != 3 {
			msg := tgbotapi.NewMessage(chatID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_user <user_id> <username>")
			b.bot.Send(msg)
			return
		}
		userID, err := strconv.ParseInt(args[1], 10, 64)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
			b.bot.Send(msg)
			return
		}
		if err := b.db.AddUser(userID, args[2]); err != nil {
			msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err))
			b.bot.Send(msg)
			return
		}
		msg := tgbotapi.NewMessage(chatID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
		b.bot.Send(msg)

	case "add_chat":
		if !b.IsAdmin(userID) {
			msg := tgbotapi.NewMessage(chatID, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
			b.bot.Send(msg)
			return
		}
		args := strings.Fields(msg.Text)
		if len(args) != 3 {
			msg := tgbotapi.NewMessage(chatID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_chat <chat_id> <title>")
			b.bot.Send(msg)
			return
		}
		chatID, err := strconv.ParseInt(args[1], 10, 64)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id")
			b.bot.Send(msg)
			return
		}
		if err := b.db.AddChat(chatID, args[2]); err != nil {
			msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞: %v", err))
			b.bot.Send(msg)
			return
		}
		msg := tgbotapi.NewMessage(chatID, "–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
		b.bot.Send(msg)

	case "add_group":
		if !b.IsAdmin(userID) {
			msg := tgbotapi.NewMessage(chatID, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
			b.bot.Send(msg)
			return
		}
		args := strings.Fields(msg.Text)
		if len(args) != 2 {
			msg := tgbotapi.NewMessage(chatID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_group <name>")
			b.bot.Send(msg)
			return
		}
		if err := b.db.AddGroup(args[1]); err != nil {
			msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: %v", err))
			b.bot.Send(msg)
			return
		}
		msg := tgbotapi.NewMessage(chatID, "–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
		b.bot.Send(msg)
		b.ShowAdminPanel(chatID)

	case "add_users_to_chat":
		if !b.IsAdmin(userID) {
			msg := tgbotapi.NewMessage(chatID, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
			b.bot.Send(msg)
			return
		}
		args := strings.Fields(msg.Text)
		if len(args) < 3 {
			msg := tgbotapi.NewMessage(chatID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_users_to_chat <chat_id> <user_id1> [user_id2 ...]")
			b.bot.Send(msg)
			return
		}
		chatID, err := strconv.ParseInt(args[1], 10, 64)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id")
			b.bot.Send(msg)
			return
		}
		var userIDs []int64
		for _, arg := range args[2:] {
			userID, err := strconv.ParseInt(arg, 10, 64)
			if err != nil {
				msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id: %s", arg))
				b.bot.Send(msg)
				return
			}
			userIDs = append(userIDs, userID)
		}
		if err := b.db.AddUsersToChat(userIDs, chatID); err != nil {
			msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç: %v", err))
			b.bot.Send(msg)
			return
		}
		msg := tgbotapi.NewMessage(chatID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç")
		b.bot.Send(msg)

	default:
		msg := tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
		b.bot.Send(msg)
	}
}

func (b *TelegramBot) HandleCallbackQuery(update tgbotapi.Update) {
	query := update.CallbackQuery.Data
	adminchatID := update.CallbackQuery.Message.Chat.ID
	userID := update.CallbackQuery.From.ID

	if !b.IsAdmin(userID) {
		msg := tgbotapi.NewMessage(adminchatID, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
		b.bot.Send(msg)
		return
	}

	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	b.deleteMessage(adminchatID, update.CallbackQuery.Message.MessageID)

	switch {
	case query == "all":
		// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		chats := b.db.GetChatsForUser(userID)
		if len(chats) > 0 {
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
			users := b.db.GetUsersForMention(chats[0].ChatID, "")
			if len(users) > 0 {
				msg := tgbotapi.NewMessage(adminchatID, strings.Join(users, " "))
				b.bot.Send(msg)
			} else {
				msg := tgbotapi.NewMessage(adminchatID, "–í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
				b.bot.Send(msg)
			}
		} else {
			msg := tgbotapi.NewMessage(adminchatID, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤.")
			b.bot.Send(msg)
		}

	case strings.HasPrefix(query, "group "):
		groupName := strings.TrimPrefix(query, "group ")
		// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		chats := b.db.GetChatsForUser(userID)
		if len(chats) > 0 {
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
			users := b.db.GetUsersForMention(chats[0].ChatID, groupName)
			if len(users) > 0 {
				msg := tgbotapi.NewMessage(adminchatID, strings.Join(users, " "))
				b.bot.Send(msg)
			} else {
				msg := tgbotapi.NewMessage(adminchatID, "–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
				b.bot.Send(msg)
			}
		} else {
			msg := tgbotapi.NewMessage(adminchatID, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤.")
			b.bot.Send(msg)
		}

	case strings.HasPrefix(query, "create_user"):
		msg := tgbotapi.NewMessage(adminchatID, "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/add_user <user_id> <username>")
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "admin_users"),
			),
		)
		b.bot.Send(msg)

	case strings.HasPrefix(query, "create_chat"):
		msg := tgbotapi.NewMessage(adminchatID, "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/add_chat <chat_id> <title>")
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "admin_chats"),
			),
		)
		b.bot.Send(msg)

	case strings.HasPrefix(query, "create_group"):
		msg := tgbotapi.NewMessage(adminchatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/add_group <name>")
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "admin_groups"),
			),
		)
		b.bot.Send(msg)

	case strings.HasPrefix(query, "users_page_"):
		page, _ := strconv.Atoi(strings.TrimPrefix(query, "users_page_"))
		b.ShowUsersList(adminchatID, page, &update)

	case strings.HasPrefix(query, "chats_page_"):
		page, _ := strconv.Atoi(strings.TrimPrefix(query, "chats_page_"))
		b.ShowChatsList(adminchatID, page, &update)

	case strings.HasPrefix(query, "groups_page_"):
		page, _ := strconv.Atoi(strings.TrimPrefix(query, "groups_page_"))
		b.ShowGroupsList(adminchatID, page, &update)

	case strings.HasPrefix(query, "user_info_"):
		userID, _ := strconv.ParseInt(strings.TrimPrefix(query, "user_info_"), 10, 64)
		b.ShowUserInfo(adminchatID, userID)

	case strings.HasPrefix(query, "chat_info_"):
		OtherChatid, _ := strconv.ParseInt(strings.TrimPrefix(query, "chat_info_"), 10, 64)
		b.ShowChatInfo(adminchatID, OtherChatid)

	case strings.HasPrefix(query, "group_info_"):
		groupName := strings.TrimPrefix(query, "group_info_")
		b.ShowGroupInfo(adminchatID, groupName)

	case strings.HasPrefix(query, "edit_user_"):
		userID, _ := strconv.ParseInt(strings.TrimPrefix(query, "edit_user_"), 10, 64)
		// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		msg := tgbotapi.NewMessage(adminchatID, fmt.Sprintf("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", userID))
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "admin_users"),
			),
		)
		b.bot.Send(msg)

	case strings.HasPrefix(query, "delete_user_"):
		userID, _ := strconv.ParseInt(strings.TrimPrefix(query, "delete_user_"), 10, 64)
		if err := b.db.DeleteUser(userID); err != nil {
			msg := tgbotapi.NewMessage(adminchatID, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
			b.bot.Send(msg)
			return
		}
		msg := tgbotapi.NewMessage(adminchatID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
		b.bot.Send(msg)
		b.ShowAdminPanel(adminchatID)

	case strings.HasPrefix(query, "edit_chat_"):
		//chatID, _ := strconv.ParseInt(strings.TrimPrefix(query, "edit_chat_"), 10, 64)
		// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞
		msg := tgbotapi.NewMessage(adminchatID, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "admin_chats"),
			),
		)
		b.bot.Send(msg)

	case strings.HasPrefix(query, "delete_chat_"):
		chatID, _ := strconv.ParseInt(strings.TrimPrefix(query, "delete_chat_"), 10, 64)
		if err := b.db.DeleteChat(chatID); err != nil {
			msg := tgbotapi.NewMessage(adminchatID, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞")
			b.bot.Send(msg)
			return
		}
		msg := tgbotapi.NewMessage(adminchatID, "–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
		b.bot.Send(msg)
		b.ShowAdminPanel(adminchatID)

	case strings.HasPrefix(query, "edit_group_"):
		groupName := strings.TrimPrefix(query, "edit_group_")
		// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
		msg := tgbotapi.NewMessage(adminchatID, fmt.Sprintf("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã %s (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", groupName))
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "admin_groups"),
			),
		)
		b.bot.Send(msg)

	case strings.HasPrefix(query, "delete_group_"):
		groupName := strings.TrimPrefix(query, "delete_group_")
		if err := b.db.DeleteGroup(groupName); err != nil {
			msg := tgbotapi.NewMessage(adminchatID, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã")
			b.bot.Send(msg)
			return
		}
		msg := tgbotapi.NewMessage(adminchatID, "–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
		b.bot.Send(msg)
		b.ShowAdminPanel(adminchatID)

	case query == "admin_users":
		b.ShowUsersList(adminchatID, 1, &update)

	case query == "admin_chats":
		b.ShowChatsList(adminchatID, 1, &update)

	case query == "admin_groups":
		b.ShowGroupsList(adminchatID, 1, &update)

	case query == "admin_relations":
		b.ShowRelations(adminchatID)

	case query == "admin_view":
		b.ShowViewMenu(adminchatID)

	case query == "admin_back":
		b.ShowAdminPanel(adminchatID)

	case strings.HasPrefix(query, "add_users_to_chat_"):
		chatID, _ := strconv.ParseInt(strings.TrimPrefix(query, "add_users_to_chat_"), 10, 64)
		b.ShowUsersToAddToChat(adminchatID, chatID, 1, &update)

	case strings.HasPrefix(query, "add_users_to_chat_page_"):
		parts := strings.Split(strings.TrimPrefix(query, "add_users_to_chat_page_"), "_")
		chatID, _ := strconv.ParseInt(parts[0], 10, 64)
		page, _ := strconv.Atoi(parts[1])
		b.ShowUsersToAddToChat(adminchatID, chatID, page, &update)

	case strings.HasPrefix(query, "add_user_to_chat_"):
		parts := strings.Split(strings.TrimPrefix(query, "add_user_to_chat_"), "_")
		chatID, _ := strconv.ParseInt(parts[0], 10, 64)
		userID, _ := strconv.ParseInt(parts[1], 10, 64)

		if err := b.db.AddUserToChat(userID, chatID); err != nil {
			msg := tgbotapi.NewMessage(adminchatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç: %v", err))
			b.bot.Send(msg)
			return
		}

		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
		user, err := b.db.GetUser(userID)
		if err != nil {
			msg := tgbotapi.NewMessage(adminchatID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç")
			b.bot.Send(msg)
			return
		}

		msg := tgbotapi.NewMessage(adminchatID, fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç", user.Username))
		b.bot.Send(msg)
		b.ShowAdminPanel(adminchatID)

	case strings.HasPrefix(query, "add_users_to_group_"):
		groupName := strings.TrimPrefix(query, "add_users_to_group_")
		b.ShowUsersToAddToGroup(adminchatID, groupName, 1, &update)

	case strings.HasPrefix(query, "add_users_to_group_page_"):
		parts := strings.Split(strings.TrimPrefix(query, "add_users_to_group_page_"), "_")
		groupName := parts[0]
		page, _ := strconv.Atoi(parts[1])
		b.ShowUsersToAddToGroup(adminchatID, groupName, page, &update)

	case strings.HasPrefix(query, "add_user_to_group_"):
		parts := strings.Split(strings.TrimPrefix(query, "add_user_to_group_"), "_")
		groupName := parts[0]
		userID, _ := strconv.ParseInt(parts[1], 10, 64)

		if err := b.db.AddUsersToGroup([]int64{userID}, groupName); err != nil {
			msg := tgbotapi.NewMessage(adminchatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É: %v", err))
			b.bot.Send(msg)
			return
		}

		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
		user, err := b.db.GetUser(userID)
		if err != nil {
			msg := tgbotapi.NewMessage(adminchatID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É")
			b.bot.Send(msg)
			return
		}

		msg := tgbotapi.NewMessage(adminchatID, fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É", user.Username))
		b.bot.Send(msg)
		b.ShowAdminPanel(adminchatID)

	default:
		msg := tgbotapi.NewMessage(adminchatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
		b.bot.Send(msg)
	}
}

func (b *TelegramBot) HandleInlineQuery(update tgbotapi.Update) {
	query := update.InlineQuery
	if query == nil {
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var results []interface{}
	
	// –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userGroups := b.db.GetGroupsForUser(query.From.ID)
	
	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	chats := b.db.GetChatsForUser(query.From.ID)
	var currentChatID int64
	if len(chats) > 0 {
		currentChatID = chats[0].ChatID
	}
	
	if len(userGroups) > 0 {
		for _, group := range userGroups {
			groupButton := tgbotapi.NewInlineQueryResultArticle(
				query.ID+"_"+group.Name,
				fmt.Sprintf("–ì—Ä—É–ø–ø–∞: %s", group.Name),
				fmt.Sprintf("–£–ø–æ–º—è–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã %s", group.Name),
			)
			
			// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã
			var groupMentionText string
			if currentChatID != 0 {
				groupUsers := b.db.GetUsersForMention(currentChatID, group.Name)
				if len(groupUsers) > 0 {
					groupMentionText = strings.Join(groupUsers, " ")
				} else {
					groupMentionText = fmt.Sprintf("–í –≥—Ä—É–ø–ø–µ %s –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ.", group.Name)
				}
			} else {
				groupMentionText = fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /group %s –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ.", group.Name)
			}
			
			groupButton.Description = fmt.Sprintf("–û—Ç–º–µ—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã %s –≤ —á–∞—Ç–µ", group.Name)
			groupButton.InputMessageContent = tgbotapi.InputTextMessageContent{
				Text: groupMentionText,
			}
			results = append(results, groupButton)
		}
	} else {
		// –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≥—Ä—É–ø–ø
		noGroups := tgbotapi.NewInlineQueryResultArticle(
			query.ID+"_no_groups",
			"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø",
			"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø",
		)
		noGroups.Description = "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã"
		noGroups.InputMessageContent = tgbotapi.InputTextMessageContent{
			Text: "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã.",
		}
		results = append(results, noGroups)
	}
	
	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É –ø—Ä–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	infoButton := tgbotapi.NewInlineQueryResultArticle(
		query.ID+"_info",
		"–î–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /all",
		"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
	)
	infoButton.Description = "–ß—Ç–æ–±—ã —É–ø–æ–º—è–Ω—É—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /all –∏–ª–∏ /everyone –≤ —á–∞—Ç–µ"
	infoButton.InputMessageContent = tgbotapi.InputTextMessageContent{
		Text: "–ß—Ç–æ–±—ã —É–ø–æ–º—è–Ω—É—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /all –∏–ª–∏ /everyone –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ —á–∞—Ç–µ.",
	}
	infoButton.ThumbURL = "https://img.icons8.com/color/48/000000/info.png"
	results = append(results, infoButton)
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	inlineConfig := tgbotapi.InlineConfig{
		InlineQueryID: query.ID,
		Results:       results,
		CacheTime:     0,
	}
	b.bot.Send(inlineConfig)
}
